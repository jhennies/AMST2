
import os
import json

print(os.getcwd())
print(__file__)
with open('run.json', mode='r') as f:
    run_info = json.load(f)

this_cache_dirpath = run_info['this_cache_dirpath']
batch_ids = run_info['batch_ids']
preview = not run_info['no_preview']
assert preview, 'Switching off previews is deprecated!'
src_dirpath = run_info['src_dirpath']
meta_dirpath = run_info['meta_dirpath']
apply_final = run_info['apply_final']
auto_pad = run_info['auto_pad']
determine_bounds = run_info['determine_bounds'] or auto_pad

print(f'run_info = {run_info}')


def _rule_all_inputs(wildcards):
    inputs = []
    if preview:
        inputs.append(os.path.join(meta_dirpath, "elastix_preview.h5"))
    if apply_final:
        inputs.extend([os.path.join(this_cache_dirpath, f"apply_final_transformations_{idx}.done") for idx in batch_ids])
    return inputs


rule all:
    input:
        _rule_all_inputs


rule apply_final_transformations:
    input:
        run_info["output_ome_zarr_filepath"],
        os.path.join(meta_dirpath,"elastix.json")
    output:
        os.path.join(this_cache_dirpath, "apply_final_transformations_{idx}.done")
    params:
        run_info=run_info
    threads: min(run_info['batch_size'], run_info['cores'], run_info['max_cores_per_task'])
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "apply_transformation.py")


def _get_target_stack_shape():
    stack_shape_json = os.path.join(meta_dirpath, "elastix.json")
    return f'{stack_shape_json}:meta:stack_shape'


rule create_ome_zarr:
    # Normally this rule does not take inputs, but in this case I need to make sure that the
    # preview job is done first. This gives the stack_shape information
    input:
        os.path.join(meta_dirpath,"elastix.json")
    output:
        directory(run_info["output_ome_zarr_filepath"])
    params:
        output_ome_zarr_filepath=run_info["output_ome_zarr_filepath"],
        stack_shape=_get_target_stack_shape(),
        resolution=run_info["resolution"],
        unit=run_info["unit"],
        downsample_type=run_info["downsample_type"],
        downsample_factors=run_info["downsample_factors"],
        chunk_size=run_info["chunk_size"],
        dtype=run_info["output_dtype"],
        name=run_info["name"]
    threads: 1
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "create_ome_zarr.py")


rule alignment_preview:
    input:
        expand(os.path.join(this_cache_dirpath, "elastix_{idx}.json"), idx=batch_ids)
    output:
        os.path.join(meta_dirpath, "elastix_preview.h5"),
        os.path.join(meta_dirpath, "elastix.json")
    params:
        run_info=run_info,
        save_joined_transforms=True,
        compute_auto_pad=auto_pad
    threads: 1
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "alignment_preview.py")


rule elastix_stack_alignment:
    output:
        os.path.join(this_cache_dirpath, "elastix_{idx}.json")
    params:
        run_info=run_info,
        elastix_stack_alignment_workflow_params=run_info['elastix_stack_alignment_workflow_params'],
        determine_bounds=determine_bounds
    threads: min(run_info['batch_size'], run_info['cores'], run_info['max_cores_per_task'])
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "elastix_stack_alignment.py")

