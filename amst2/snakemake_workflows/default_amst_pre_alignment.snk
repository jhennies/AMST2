
import os
import json

print(os.getcwd())
print(__file__)
with open('run.json', mode='r') as f:
    run_info = json.load(f)

this_cache_dirpath = run_info['this_cache_dirpath']
batch_ids = run_info['batch_ids']
use_tm = run_info['template_roi'] is not None
use_local = not run_info['no_local_alignment']
preview = not run_info['no_previews']
src_dirpath = run_info['src_dirpath']

print(f'run_info = {run_info}')


def rule_all_inputs(wildcards):
    inputs = []
    if use_tm and preview:
        inputs.append(os.path.join(this_cache_dirpath, "template_matching_preview.h5"))
    if use_local and preview:
        inputs.append(os.path.join(this_cache_dirpath, "local_preview.h5"))
    inputs.extend(expand("apply_final_transformations_{idx}.done", idx=batch_ids))
    return inputs


rule all:
    input:
        rule_all_inputs


rule apply_final_transformations:
    input:
        os.path.join(this_cache_dirpath,"combine_transformations.json")
    output:
        "apply_final_transformations_{idx}.done"
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "apply_transformation.py")


def rule_combine_and_sequence_transformations_inputs(wildcards):
    inputs = []
    if use_local:
        inputs.extend(expand(os.path.join(this_cache_dirpath, "local_{idx}.json"), idx=batch_ids))
    if use_tm:
        inputs.extend(expand(os.path.join(this_cache_dirpath, "template_matching_{idx}.json"), idx=batch_ids))
    return inputs


rule combine_and_serialize_transformations:
    input:
        rule_combine_and_sequence_transformations_inputs
    output:
        os.path.join(this_cache_dirpath,"combine_transformations.json")
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "combine_and_serialize_transformations.py")


rule template_matching_preview:
    input:
        expand(os.path.join(this_cache_dirpath,"template_matching_{idx}.json"),idx=batch_ids)
    output:
        directory(os.path.join(this_cache_dirpath, "template_matching_preview.h5"))


rule template_matching:
    output:
        os.path.join(this_cache_dirpath, "template_matching_{idx}.json")


rule local_alignment_preview:
    input:
        expand(os.path.join(this_cache_dirpath, "local_{idx}.json"), idx=batch_ids)
    output:
        os.path.join(this_cache_dirpath, "local_preview.h5")
    params:
        run_info=run_info
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "alignment_preview.py")


rule elastix_stack_alignment:
    output:
        os.path.join(this_cache_dirpath,"local_{idx}.json")
    params:
        run_info=run_info,
        elastix_stack_alignment_workflow_params=run_info['local_alignment_params']
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "elastix_stack_alignment.py")

