
import os
import json

print(os.getcwd())
print(__file__)
with open('run.json', mode='r') as f:
    run_info = json.load(f)

this_cache_dirpath = run_info['this_cache_dirpath']
batch_ids = run_info['batch_ids']
use_tm = run_info['use_template_matching']
use_local = not run_info['no_local_alignment']
preview = not run_info['no_previews']
src_dirpath = run_info['src_dirpath']
preview_dirpath = run_info['preview_dirpath']

print(f'run_info = {run_info}')


def _rule_all_inputs(wildcards):
    inputs = []
    if use_tm and preview:
        inputs.append(os.path.join(preview_dirpath, "template_matching_preview.h5"))
    if use_local and preview:
        inputs.append(os.path.join(preview_dirpath, "local_preview.h5"))
    inputs.extend([os.path.join(this_cache_dirpath, f"apply_final_transformations_{idx}.done") for idx in batch_ids])
    inputs.append(os.path.join(preview_dirpath, "final_preview.h5"))
    return inputs


rule all:
    input:
        _rule_all_inputs


rule apply_final_transformations:
    input:
        run_info["output_ome_zarr_filepath"],
        os.path.join(this_cache_dirpath,"finalize_and_join_transformations.json")
    output:
        os.path.join(this_cache_dirpath, "apply_final_transformations_{idx}.done")
    params:
        run_info=run_info
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "apply_transformation.py")


def _get_target_stack_shape():
    stack_shape_json = os.path.join(this_cache_dirpath,"finalize_and_join_transformations.json")
    return f'{stack_shape_json}:meta:stack_shape'


rule create_ome_zarr:
    # Normally this rule does not take inputs, but in this case I need to make sure that the
    # finalize_and_join_transformations job is done first. This gives the stack_shape information
    input:
        os.path.join(this_cache_dirpath,"finalize_and_join_transformations.json")
    output:
        directory(run_info["output_ome_zarr_filepath"])
    params:
        output_ome_zarr_filepath=run_info["output_ome_zarr_filepath"],
        stack_shape=_get_target_stack_shape(),
        resolution=run_info["resolution"],
        unit=run_info["unit"],
        downsample_type=run_info["downsample_type"],
        downsample_factors=run_info["downsample_factors"],
        chunk_size=run_info["chunk_size"],
        dtype=run_info["output_dtype"],
        name=None
    threads: 1
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "create_ome_zarr.py")


rule final_preview:
    input:
        os.path.join(this_cache_dirpath,"finalize_and_join_transformations.json")
    output:
        os.path.join(preview_dirpath, "final_preview.h5")
    params:
        run_info=run_info
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "alignment_preview.py")


def _rule_finalize_and_join_transformations_inputs(wildcards):
    inputs = []
    if use_local:
        inputs.extend(expand(os.path.join(this_cache_dirpath, "local_{idx}.json"), idx=batch_ids))
    if use_tm:
        inputs.extend(expand(os.path.join(this_cache_dirpath, "template_matching_{idx}.json"), idx=batch_ids))
    return inputs


rule finalize_and_join_transformations:
    input:
        _rule_finalize_and_join_transformations_inputs
    output:
        os.path.join(this_cache_dirpath,"finalize_and_join_transformations.json")
    params:
        run_info=run_info,
        use_tm=use_tm,
        use_local=use_local
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "finalize_and_join_transformations.py")


rule template_matching_preview:
    input:
        expand(os.path.join(this_cache_dirpath,"template_matching_{idx}.json"),idx=batch_ids)
    output:
        os.path.join(preview_dirpath, "template_matching_preview.h5")
    params:
        run_info=run_info
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "alignment_preview.py")


rule template_matching:
    output:
        os.path.join(this_cache_dirpath, "template_matching_{idx}.json")
    params:
        run_info=run_info,
        template_matching_stack_alignment_workflow_params=run_info['template_matching_params'],
        determine_bounds=True
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "template_matching_stack_alignment.py")


rule local_alignment_preview:
    input:
        expand(os.path.join(this_cache_dirpath, "local_{idx}.json"), idx=batch_ids)
    output:
        os.path.join(preview_dirpath, "local_preview.h5")
    params:
        run_info=run_info
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "alignment_preview.py")


rule elastix_stack_alignment:
    output:
        os.path.join(this_cache_dirpath,"local_{idx}.json")
    params:
        run_info=run_info,
        elastix_stack_alignment_workflow_params=run_info['local_alignment_params'],
        determine_bounds=not use_tm
    script:
        os.path.join(src_dirpath, "snakemake_call_scripts", "elastix_stack_alignment.py")

